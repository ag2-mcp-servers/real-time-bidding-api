# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:41:00+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class ActivateBiddingFunctionRequest(BaseModel):
    pass


class ArchiveBiddingFunctionRequest(BaseModel):
    pass


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    ARCHIVED = 'ARCHIVED'


class Type(Enum):
    FUNCTION_TYPE_UNSPECIFIED = 'FUNCTION_TYPE_UNSPECIFIED'
    TURTLEDOVE_SIMULATION_BIDDING_FUNCTION = 'TURTLEDOVE_SIMULATION_BIDDING_FUNCTION'
    FLEDGE_BIDDING_FUNCTION = 'FLEDGE_BIDDING_FUNCTION'


class BiddingFunction(BaseModel):
    biddingFunction: Optional[str] = Field(
        None, description='The raw Javascript source code of the bidding function.'
    )
    name: Optional[str] = Field(
        None,
        description='The name of the bidding function that must follow the pattern: `bidders/{bidder_account_id}/biddingFunctions/{bidding_function_name}`.',
    )
    state: Optional[State] = Field(
        None, description='Output only. The state of the bidding function.'
    )
    type: Optional[Type] = Field(
        None, description='The type of the bidding function to be created.'
    )


class ListBiddingFunctionsResponse(BaseModel):
    biddingFunctions: Optional[List[BiddingFunction]] = Field(
        None, description="A list of a bidder's bidding functions."
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token which can be passed to a subsequent call to the `ListBiddingFunctions` method to retrieve the next page of results in ListBiddingFunctionsRequest.pageToken.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'
